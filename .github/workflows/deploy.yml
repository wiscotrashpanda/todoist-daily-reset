name: Deploy Todoist Daily Reset

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: todoist-daily-reset
  LAMBDA_FUNCTION_NAME: todoist-daily-reset

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 lambda_function.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 lambda_function.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test Lambda function syntax
      run: |
        python -m py_compile lambda_function.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - run: |
        echo ${{ vars.AWS_OIDC_PROVISIONER_ROLE_ARN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_OIDC_PROVISIONER_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      env:
        TF_VAR_todoist_api_token: ${{ secrets.TODOIST_API_TOKEN }}
        TF_VAR_timezone: ${{ vars.TIMEZONE || 'UTC' }}
        TF_VAR_schedule_expression: ${{ vars.SCHEDULE_EXPRESSION || 'cron(0 1 * * ? *)' }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
      run: terraform plan

    - name: Terraform Apply
      working-directory: ./terraform
      env:
        TF_VAR_todoist_api_token: ${{ secrets.TODOIST_API_TOKEN }}
        TF_VAR_timezone: ${{ vars.TIMEZONE || 'UTC' }}
        TF_VAR_schedule_expression: ${{ vars.SCHEDULE_EXPRESSION || 'cron(0 1 * * ? *)' }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
      run: terraform apply -auto-approve

    - name: Update Lambda function with new image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws lambda update-function-code \
          --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG